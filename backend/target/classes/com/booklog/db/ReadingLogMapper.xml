<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.booklog.db.ReadingLogMapper">

   <!-- 독서 상태에 따른 책과 독서 기록 조회 -->
   <select id="findMyLogs" parameterType="map"
      resultType="com.booklog.model.ReadingLogDTO">
      SELECT
      RL.LOG_IDX AS logIdx,
      USER_ID AS userId,
      RL.STATUS,
      RL.ST_DT AS startDate,
      RL.ED_DT AS endDate,
      RL.RATING,
      RL.CONTENT,

      B.BOOK_IDX AS bookIdx,
      B.TITLE,
      B.AUTHOR,
      B.GENRE,
      B.DESCRIPTION,
      B.BOOK_IMG AS bookImgUrl

      FROM
      READING_LOG RL
      JOIN BOOK B ON RL.BOOK_IDX =
      B.BOOK_IDX
      WHERE RL.USER_ID
      =
      #{userId}
      AND RL.STATUS = #{status}
   </select>

   <!-- 태그 조회 -->
   <select id="findTagsByLogIdx" parameterType="int"
      resultType="string">
      SELECT T.TAG_NAME
      FROM READING_LOG_TAG RLT
      JOIN TAG T ON
      RLT.TAG_IDX = T.TAG_IDX
      WHERE RLT.LOG_IDX = #{logIdx}
   </select>

   <!-- 인용구 조회 -->
   <select id="findQuotesByLogIdx" parameterType="int"
      resultType="string">
      SELECT Q.CONTENT
      FROM QUOTE Q
      JOIN READING_LOG RL ON
      Q.BOOK_IDX = RL.BOOK_IDX
      WHERE RL.LOG_IDX = #{logIdx}
      AND Q.USER_ID =
      RL.USER_ID
   </select>

   <!-- 피드에서 독서 기록 조회 -->
   <select id="findLogs" parameterType="int"
      resultType="com.booklog.model.ReadingLogDTO">
      SELECT
      RL.LOG_IDX AS logIdx,
      RL.RATING,
      RL.CONTENT,
      RL.CREATED_AT AS createdAt,

      U.USER_ID AS userId,
      U.PROFILE_IMG AS profileImgUrl,

      B.BOOK_IDX AS bookIdx,
      B.TITLE,
      B.AUTHOR,
      B.GENRE,
      B.DESCRIPTION,
      B.BOOK_IMG AS bookImgUrl

      FROM READING_LOG RL
      JOIN BOOK B ON RL.BOOK_IDX = B.BOOK_IDX
      JOIN USER U ON
      RL.USER_ID = U.USER_ID

      WHERE RL.LOG_IDX = #{logIdx}
   </select>

	<!-- 독서 기록에 달린 댓글 조회 -->
	<select id="findCommentsByLogIdx" parameterType="int"
		resultType="com.booklog.model.CommentDTO">
		SELECT
		C.COMMENT_IDX AS commentIdx,
		C.USER_ID AS userId,
		C.CONTENT,
		C.PARENT_IDX AS parentIdx,
		C.CREATED_AT AS createdAt,
		C.IS_DELETED AS
		isDeleted,
		U.PROFILE_IMG AS profileImgUrl
		FROM COMMENT C
		LEFT JOIN USER U ON C.USER_ID = U.USER_ID
		WHERE C.LOG_IDX = #{logIdx}
		ORDER BY C.CREATED_AT ASC
	</select>

   <!-- 독서 기록 추가 -->
   <insert id="insertLog"
      parameterType="com.booklog.model.ReadingLogDTO"
      useGeneratedKeys="true" keyProperty="logIdx">
      INSERT INTO READING_LOG
      (USER_ID,
      BOOK_IDX, STATUS, ST_DT, ED_DT, RATING, CONTENT, CREATED_AT)
      VALUES
      (#{userId}, #{bookIdx}, #{status}, #{startDate}, #{endDate},
      #{rating},
      #{content}, NOW())
   </insert>

   <!-- 독서 기록 수정 -->
   <update id="updateLog"
      parameterType="com.booklog.model.ReadingLogDTO">
      UPDATE READING_LOG
      SET
      STATUS = #{status},
      RATING =
      #{rating},
      ST_DT = #{startDate},
      ED_DT = #{endDate},
      CONTENT =
      #{content},
      CREATED_AT=NOW()
      WHERE LOG_IDX = #{logIdx} AND USER_ID =
      #{userId}
   </update>

   <!-- 태그 전체 삭제 -->
   <delete id="deleteAllTags" parameterType="int">
      DELETE FROM
      READING_LOG_TAG WHERE LOG_IDX = #{logIdx}
   </delete>

   <!-- 인용구 전체 삭제 -->
   <delete id="deleteAllQuotes" parameterType="map">
      DELETE FROM QUOTE
      WHERE
      BOOK_IDX = #{bookIdx} AND USER_ID = #{userId}
   </delete>

   <!-- 태그 추가 -->
   <insert id="insertTag">
      INSERT IGNORE INTO TAG (TAG_NAME) VALUES (#{tag})
   </insert>

   <!-- 리딩로그와 태그를 연결해주는 테이블에도 추가 -->
   <insert id="insertReadingLogTag">
      INSERT INTO READING_LOG_TAG (LOG_IDX, TAG_IDX,
      USER_ID)
      VALUES (#{logIdx}, #{tagIdx}, #{userId})
   </insert>

   <!-- 인용구 추가 -->
   <insert id="insertQuote">
      INSERT INTO QUOTE (USER_ID, BOOK_IDX, CONTENT)
      VALUES
      (#{userId}, #{bookIdx}, #{quote})
   </insert>

   <!-- 독서 기록 삭제 -->
   <delete id="deleteLog" parameterType="int">
      DELETE FROM READING_LOG
      WHERE LOG_IDX = #{logIdx}
   </delete>

   <!-- 태그 이름으로 태그 ID 조회 -->
   <select id="selectTagIdxByName" resultType="Integer">
      SELECT TAG_IDX
      FROM
      TAG
      WHERE TAG_NAME = #{tag}
   </select>

   <!-- 인용구 하나 삭제 -->
   <delete id="deleteQuote" parameterType="int">
      DELETE FROM QUOTE
      WHERE
      QUOTE_IDX = #{quoteIdx}
   </delete>

   <!-- 좋아요 수 조회 -->
   <select id="countLikes" resultType="int">
      SELECT COUNT(*) FROM READING_LOG_LIKE
      WHERE LOG_IDX = #{logIdx}
   </select>
   
   <!-- 중복 저장 확인  -->
   <select id="findLogByUserIdAndBookIdx" resultType="com.booklog.model.ReadingLogDTO">
       SELECT * FROM READING_LOG
       WHERE USER_ID = #{userId} AND BOOK_IDX = #{bookIdx}
   </select>
   
   <!-- 댓글  -->
   <insert id="insertComment" parameterType="com.booklog.model.CommentDTO">
       INSERT INTO COMMENT (LOG_IDX, USER_ID, CONTENT, CREATED_AT)
       VALUES (#{logIdx}, #{userId}, #{content}, NOW())
   </insert>
   
   <!-- 댓글 삭제  -->
   <delete id="deleteComment" parameterType="int">
       DELETE FROM COMMENT
       WHERE COMMENT_IDX = #{commentIdx}
   </delete>
   
   <!-- 좋아요 추가  -->
   <insert id="insertLike">
       INSERT INTO READING_LOG_LIKE (USER_ID, LOG_IDX)
       VALUES (#{userId}, #{logIdx})
   </insert>
   
   <!-- 좋아요 삭제  -->
   <delete id="deleteLike">
       DELETE FROM READING_LOG_LIKE
       WHERE USER_ID = #{userId} AND LOG_IDX = #{logIdx}
   </delete>
   
   <!-- 좋아요 여부 확인 -->
   <select id="checkIfLiked" resultType="int">
       SELECT COUNT(*) FROM READING_LOG_LIKE
       WHERE USER_ID = #{userId} AND LOG_IDX = #{logIdx}
   </select>
   
</mapper>